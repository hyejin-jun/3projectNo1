buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
<<<<<<< HEAD
} /* 쿼리dsl 추가 설정 : p448쪽 */

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.czo'
=======
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.zerock'
>>>>>>> origin/LHW
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
<<<<<<< HEAD
        languageVersion = JavaLanguageVersion.of(17)
=======
        languageVersion = JavaLanguageVersion.of(21)
>>>>>>> origin/LHW
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
<<<<<<< HEAD

    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // 롬북
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // 쿼리dsl 문구 추가
=======
    /*============================================================*/

/* 스프링 시큐리티 */

    // 스프링 시큐리티 추가 : 로그인 처리용 p678 https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security
    implementation("org.springframework.boot:spring-boot-starter-security:3.4.7")

    // 스프링 시큐리티6+타입리프 https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity6
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'

/* Spring MVC */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools' // 자동 처리 등 유틸

/* JUnit 단위테스트 */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

/* thymeleaf */
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

/* DB */
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'						/*마리아 db 드라이버*/
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

/* lombok 어노테이션 확장 */
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

/* lombok 테스트용 추가 */
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

/* DTO <-> Entity */
// https://mvnrepository.com/artifact/org.modelmapper/modelmapper
    implementation 'org.modelmapper:modelmapper:3.1.0'

// query dsl
>>>>>>> origin/LHW
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor(
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api",
<<<<<<< HEAD
            "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")

    // 매퍼
    implementation 'org.modelmapper:modelmapper:3.2.0'

    // 레이아웃 기능을 위한 라이브러리 xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" html 추가 필수
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'

    // 프론트
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'  // 타임리프
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

sourceSets {
    main {
        java {
            srcDirs += ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
=======
            "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    )
>>>>>>> origin/LHW
}

tasks.named('test') {
    useJUnitPlatform()
}
<<<<<<< HEAD
=======

/* query dsl */
sourceSets {

    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}
/* 쿼리 dsl 사용법 -> 오른쪽에 있는 Gradle 메뉴를 열고 task-> other를 찾아서 complieJava 실행*/
/* 하단에 complie가 된다.
-> 왼쪽 탐색기 -> build-> generated -> main -> domain -> Q로 시작하는 클래스
쿼리dsl용 객체로 우리가 커스텀 하면 안됨!!!!
******** 주의사항 : 엔티티나 dto를 건딜면 Q도메인을 다시 생성해야 한다.***********
삭제 방법 -> 오른쪽 Gradle 메뉴 -> Tasks->build->clean 후 재생성
*/

compileJava.dependsOn('clean')
>>>>>>> origin/LHW
